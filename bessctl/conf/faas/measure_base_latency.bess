#
# This is a traffic generator that generates many TCP flows.
#

import scapy.all as scapy

PACKET_OVERHEAD=24

# This script generates a number of flows at a specified packet rate.
pcie_addr=str($BESS_PCIE!'06:00.1')
num_cores=int($BESS_CORES!'1')
pkt_size=int($BESS_PKT_SIZE!'1500')
num_flows=int($BESS_FLOWS!'200')
flow_time=int($BESS_FLOW_TIME!'60') # in Seconds
base_pkt_rate=int($BESS_INIT_RATE!'1000')
base_bit_rate=int($BESS_INIT_RATE!'200000')
ts_offset=int($BESS_TS_OFFSET!'68')

assert(pcie_addr)
assert(1 <= num_cores <= 16)
assert(60 <= pkt_size <= 1522)
assert(64 <= ts_offset <= 100)

pkt_size = min(pkt_size, base_bit_rate / base_pkt_rate / 8)

src_ether=($BESS_SRC_ETHER!'00:15:4d:12:2b:f4')
dst_ether=($BESS_DST_ETHER!'00:00:00:00:00:04')
src_ip=($BESS_SRC_IP!'10.0.0.1')
dst_ip=($BESS_DST_IP!'192.0.0.1')
src_port=int($BESS_SRC_PORT!'10001')
dst_port=int($BESS_DST_PORT!'2000')


# Create a "template" packet to use for generated flows.
# All packets in flow will follow this formula; flowgen
# changes dst IP to generate new connections.
eth = scapy.Ether(src=src_ether, dst=dst_ether)
ip = scapy.IP(src=src_ip, dst=dst_ip)
tcp = scapy.TCP(sport=src_port, dport=dst_port)
payload = ('FaaS-NFV is cool.' + '0123456789' * 200)[:pkt_size-len(eth/ip/tcp)-PACKET_OVERHEAD]
pkt = eth/ip/tcp/payload
pkt_data = bytes(pkt)
print("Packet size = %d bytes" %(len(pkt_data)))

port0::PMDPort(pci=pcie_addr, num_inc_q=1, num_out_q=num_cores)
port_inc::PortInc(port=port0)

flowgens = dict()
queues = dict()
lc_egress::LossCounter(port_index=0, port_type=0)
lc_ingress::LossCounter(port_index=0, port_type=1)

for i in range(num_cores):
    flowgens[i] = FlowGen(template = pkt_data, \
        pps = base_pkt_rate / num_cores, \
        flow_rate = num_flows / flow_time, \
        flow_duration = flow_time, \
        arrival = 'uniform', duration='uniform', quick_rampup=True, \
        ip_src_range = 50, ip_dst_range = 50)
    queues[i] = Queue()
    flowgens[i] -> queues[i] -> Timestamp(offset=ts_offset) -> lc_egress -> QueueOut(port=port0, qid=i)

port_inc -> lc_ingress -> Measure(offset=ts_offset) -> Sink()
lc_egress.start(packet_count_offset=5000, packet_count_target=1e5)

bess.add_worker(wid=1, core=1)
port_inc.attach_task(wid=1)
for wid in range(num_cores):
    bess.add_worker(wid=2*wid+2, core=2*wid+2)
    bess.add_worker(wid=2*wid+3, core=2*wid+3)
    flowgens[wid].attach_task(wid=wid+2)
    queues[wid].attach_task(wid=2*wid+3)

bess.resume_all()
