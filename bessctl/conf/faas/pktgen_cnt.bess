#
# This is a traffic generator that generates a single packet.
# It also can be viewed as one TCP flow.
#

import scapy.all as scapy

PACKET_OVERHEAD=24

pcie_addr=str($BESS_PCIE!'06:00.1')
num_cores=int($BESS_CORES!'1')
pkt_size=int($BESS_PKT_SIZE!'1500')
base_pkt_rate=int($BESS_INIT_RATE!'1000000')
base_bit_rate=int($BESS_INIT_RATE!'9000000000')
ts_offset=int($BESS_TS_OFFSET!'68')

assert(pcie_addr)
assert(1 <= num_cores <= 16)
assert(60 <= pkt_size <= 1522)

pkt_size = min(pkt_size, base_bit_rate / base_pkt_rate / 8)

# Create a "template" packet to use for generated flows.
src_ether = '00:15:4d:12:2b:f4'
dst_ether = '00:00:00:00:00:04'
src_ip = '10.0.0.1'
dst_ip = '192.0.0.1'
src_port = 10001
dst_port = 8080
eth = scapy.Ether(src=src_ether, dst=dst_ether)
ip = scapy.IP(src=src_ip, dst=dst_ip)
tcp = scapy.TCP(sport=src_port, dport=dst_port)
payload = ('FaaS-NFV is cool.' + '0123456789' * 200)[:pkt_size-len(eth/ip/tcp)-PACKET_OVERHEAD]
pkt = eth/ip/tcp/payload
pkt_data = bytes(pkt)
print("Packet size = %d bytes" %(len(pkt_data)))

port0::PMDPort(pci=pcie_addr, num_inc_q=1, num_out_q=num_cores)
port_inc::PortInc(port=port0)

flowgens = dict()
lc_egress::LossCounter(port_index=0, port_type=0)
lc_ingress::LossCounter(port_index=0, port_type=1)

for i in range(num_cores):
    flowgens[i] = Source()
    flowgens[i] -> Rewrite(templates=[pkt_data]) -> Timestamp(offset=ts_offset) -> lc_egress -> QueueOut(port=port0, qid=i)

port_inc -> lc_ingress -> Measure(offset=ts_offset) -> Sink()
lc_egress.start(packet_count_offset=2e6, packet_count_target=5e7)

# One core is used to receive incoming packets.
bess.add_worker(wid=1, core=1)
port_inc.attach_task(wid=1)
for wid in range(num_cores):
    bess.add_worker(wid=wid+2, core=wid+2)
    bess.add_tc('rl%d' %(wid+2), policy='rate_limit', resource='packet', limit={'packet': base_pkt_rate}, wid=wid+2)
    flowgens[wid].attach_task(parent='rl%d' %(wid+2))

bess.resume_all()
