#
# The modified FlowGen can increase some flows' throughput in the
# middle of a flow's duration.
#

import scapy.all as scapy

# 'show module' command shows detailed stats/parameters

pkt_size = int($BESS_PKT_SIZE!'60')
assert(60 <= pkt_size <= 1522)

eth = scapy.Ether(src='02:1e:67:9f:4d:ae', dst='06:16:3e:1b:72:32')
ip = scapy.IP(src='10.0.0.1', dst='192.0.0.1')   # dst IP is overwritten
tcp = scapy.TCP(sport=10001, dport=10002)
payload = ('hello' + '0123456789' * 200)[:pkt_size-len(eth/ip/tcp)]
pkt = eth/ip/tcp/payload
pkt_data = bytes(pkt)

# NOTE: without quick_rampup=1, it takes a while to converge to
# the desied load level, especially when flow duration is pareto distribution

src::FlowGen(template=pkt_data, \
            pps = 2e5, flow_rate = 20, flow_duration = 20, \
            arrival = 'exponential', duration = 'pareto', \
            ip_src_range = 20, ip_dst_range = 20, quick_rampup = False, \
            ignore_synfin = True,
            increased_pkt_rate_freq = 1,
            increased_pkt_rate_pos = 50,
            increased_pkt_rate_ratio = 50)

# NOTE: we only allow one flow to pass through
acl_rules = []
acl_rules.append({'src_ip': '10.0.0.1/32', 'dst_ip': '192.0.0.1/32', 'drop': False})
acl_rules.append({'src_ip': '0.0.0.0/0', 'dst_ip': '0.0.0.0/0', 'drop': True})
acl::ACL(rules=acl_rules)

src -> q::Queue() -> acl -> Sink()

bess.add_worker(wid=1, core=1)
bess.add_worker(wid=2, core=2)

src.attach_task(wid=1)
q.attach_task(wid=2)
