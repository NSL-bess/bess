# This script demonstrates the use of BESS zero-copy Vports.

import scapy.all as scapy

PACKET_OVERHEAD=24

# This script generates a number of flows at a specified packet rate.
pkt_copy = False
flow_time = 60
ts_offset = 68
pkt_size = 1500

# Create a "template" packet to use for generated flows.
# All packets in flow will follow this formula; flowgen
# changes dst IP to generate new connections.
dst_ether=($BESS_DST_ETHER!'00:00:00:00:00:02')
src_ether=($BESS_SRC_ETHER!'00:15:4d:12:2b:f4')
eth = scapy.Ether(src=src_ether, dst=dst_ether)
src_ip=($BESS_SRC_IP!'10.0.0.1')
dst_ip=($BESS_DST_IP!'192.0.0.1')
ip = scapy.IP(src=src_ip, dst=dst_ip)
src_port = int($BESS_SRC_PORT!'10001')
tcp = scapy.TCP(sport=src_port, dport=12345)
payload = ('FaaS-NFV is cool.' + '0123456789' * 200)[:pkt_size-len(eth/ip/tcp)-PACKET_OVERHEAD]
pkt_template = bytes(eth/ip/tcp/payload)
print("pkt size = %d, payload size = %d" %(pkt_size, len(payload)))

# zero copy
vport_pri_0::VPortPrimary(pkt_copy=pkt_copy)
vport_sec_0::VPortSecondary(vport="vport_pri_0")
port_out_0::QueueOut(port=vport_pri_0, qid=0)
port_inc_0::QueueInc(port=vport_sec_0, qid=0)

pktsrc0::Source()
pktsrc1::Source()
bench_q0::Queue()
pktsrc0 -> Rewrite(templates=[pkt_template]) -> bench_q0
pktsrc1 -> Rewrite(templates=[pkt_template]) -> bench_q0
bench_q0 -> Timestamp(offset=ts_offset) -> port_out_0
port_inc_0 -> Measure(offset=ts_offset) -> Sink()

bess.add_worker(wid=1, core=1)
bess.add_worker(wid=2, core=2)
bess.add_worker(wid=3, core=3)
bess.add_worker(wid=4, core=4)

pktsrc0.attach_task(wid=1)
pktsrc1.attach_task(wid=2)
bench_q0.attach_task(wid=3)
port_inc_0.attach_task(wid=4)

bess.resume_all()
