#
# This scripts demonstrates the usage of the LossCounter module.
#

import scapy.all as scapy

PACKET_OVERHEAD=24

base_pkt_rate=int($BESS_INIT_RATE!'1000000')
base_bit_rate=int($BESS_INIT_RATE!'9000000000')
pkt_size=int($BESS_PKT_SIZE!'500')

assert(60 <= pkt_size <= 1522)

pkt_size = min(pkt_size, base_bit_rate / base_pkt_rate / 8)

# Create a "template" packet to use for generated flows.
src_ether = '00:15:4d:12:2b:f4'
dst_ether = '00:00:00:00:00:04'
src_ip = '10.0.0.1'
dst_ip = '192.0.0.1'
src_port = 10001
dst_port = 8080
eth = scapy.Ether(src=src_ether, dst=dst_ether)
ip = scapy.IP(src=src_ip, dst=dst_ip)
tcp = scapy.TCP(sport=src_port, dport=dst_port)
payload = ('FaaS-NFV is cool.' + '0123456789' * 200)[:pkt_size-len(eth/ip/tcp)-PACKET_OVERHEAD]
pkt = eth/ip/tcp/payload
pkt_data = bytes(pkt)
print("Packet size = %d bytes" %(len(pkt_data)))

src::Source()
lc_e::LossCounter(port_index=0, port_type=0)
lc_i::LossCounter(port_index=0, port_type=1)

src -> Rewrite(templates=[pkt_data]) -> lc_e -> lc_i -> Sink()

lc_e.start(target_packet_count=5e7)

bess.add_worker(0, 0)
bess.add_worker(1, 1)
bess.add_tc('rl', policy='rate_limit', resource='packet', limit={'packet': base_pkt_rate}, wid=1)
src.attach_task(parent='rl')
