#
# Test NF chain #4: a state-heavy NF chain
# ACL/Firewall -> LB -> Monitor
#
# Example:
# $ run nfvctrl/pcap_replay_chain4_mc PCAP="./equinix-nyc.dirA.20190117-125910.UTC.short.pcap",BESS_SPEED=32,BESS_IDLE_CORES=1
#

import scapy.all as scapy

PCAPFILE = $PCAP!"equinix-nyc.dirA.20190117-125910.UTC.short.pcap"
assert PCAPFILE
print("Target PCAP file: %s" %(PCAPFILE))

playback_rate_mpps = float($BESS_PKT_RATE!"0.0")
playback_rate_mbps = float($BESS_BIT_RATE!"0.0")
playback_speed = float($BESS_SPEED!"1")
update_stats_period = int($BESS_STATS_PERIOD!"200000000")
burst_size = int($BESS_BURST!'32')
acl_cnt=int($BESS_ACL!'2000')
lb_cnt=int($BESS_LB!'100')
tag_offset = 72
pcap_file = '{}'.format(PCAPFILE)
pcie0, offset0="82:00.0", 0

core_addrs = [
    {'l2_port': 0, 'l2_mac': '82:a3:ae:74:72:30'},
    {'l2_port': 1, 'l2_mac': 'a2:87:fd:f8:72:21'},
    {'l2_port': 2, 'l2_mac': '2e:c7:8b:7b:8d:a8'},
    {'l2_port': 3, 'l2_mac': '2a:9d:fd:13:15:01'},
    {'l2_port': 4, 'l2_mac': '32:a5:0f:e0:04:0b'},
    {'l2_port': 5, 'l2_mac': '06:8a:62:fb:51:51'},
    {'l2_port': 6, 'l2_mac': 'ce:2e:14:c4:a0:cb'},
    {'l2_port': 7, 'l2_mac': '6e:af:01:7a:93:6f'},
]

if playback_rate_mpps > 0:
    replayer = Replayer(offset=tag_offset, rate_mpps=playback_rate_mpps)
elif playback_rate_mbps > 0:
    replayer = Replayer(offset=tag_offset, rate_mbps=playback_rate_mbps)
else:
    replayer = Replayer(offset=tag_offset, speed=playback_speed)

acl_rules = []
for i in range(acl_cnt / 50):
    for j in range(50):
        acl_rules.append({'src_ip': '10.0.%d.%d/32' %(i+1, j+1), 'drop': True})
acl_rules.append({'src_ip': '0.0.0.0/0', 'drop': False})

nat_hosts = []
for i in range(lb_cnt / 20):
    for j in range(20):
        nat_hosts.append({'endpoint': '192.168.%d.%d' %(i/255, i%255)})

port0 = {}
pinc0 = {}
pout0 = {}
chainq = {}
fw = {}
lb = {}
monitor = {}
nfvm = {}

pcap_port = PCAPReader(dev='{}'.format(pcap_file), offset=tag_offset, timestamp=True)
src = PortInc(port=pcap_port)
queue = Queue(size=pow(2,24))
nfvss::NFVSwitch()

src -> queue -> replayer -> nfvss

for i in range(len(core_addrs)):
    chainq[i] = Queue(size=4096)
    fw[i] = FlowACL(rules=acl_rules)
    lb[i] = FlowLB(endpoints=nat_hosts)
    monitor[i] = FlowCounter()
    nfvm[i] = NFVMonitor(core_id=i, update_stats_period_ns=200000)
    pout0[0] = QueueOut(port=port0[0], qid=i)

    nfvss:i -> chainq[i]
    chainq[i] -> fw[i] -> lb[i] -> monitor[i] -> nfvm[i] -> Sink()
    chainq[i].set_burst(burst=burst_size)

# core ID starts at the offset core
bess.add_worker(wid=1, core=1)
pinc0[0].attach_task(wid=1)

for i in range(1, len(pcie0)+1):
    bess.add_worker(wid=i, core=i+offset0)
    chainq[i].attach_task(wid=i)

bess.resume_all()
