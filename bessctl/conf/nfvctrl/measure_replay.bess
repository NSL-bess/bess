#
# Measure the per-packet cross-core overhead:
# The downstream pipeline does not read/write a packet.
# In the end, the overhead of passing a packet's point is about 50 cycles / packet.
#
import scapy.all as scapy

burst_size=int($BESS_BURST!'32')
acl_cnt=int($BESS_ACL!'2000')
lb_cnt=int($BESS_LB!'100')
pkt_size=int($BESS_PKT_SIZE!'1500')
pkt_rate=int($BESS_PKT_RATE!'1000000')
extra_cycles=int($BESS_PKT_CYCLE!'0')

playback_rate_mpps = pkt_rate / 1000000.0
tag_offset = 72
PACKET_OVERHEAD=24

# Create a "template" packet to use for generated flows.
src_ether = '00:15:4d:12:2b:f4'
dst_ether = '00:00:00:00:00:01'
src_ip = '10.0.0.1'
dst_ip = '192.0.0.1'
src_port = 10001
dst_port = 8080
eth = scapy.Ether(src=src_ether, dst=dst_ether)
ip = scapy.IP(src=src_ip, dst=dst_ip)
tcp = scapy.TCP(sport=src_port, dport=dst_port)
payload = ('FaaS-NFV is cool.' + '0123456789' * 200)[:pkt_size-len(eth/ip/tcp)-PACKET_OVERHEAD]
pkt = eth/ip/tcp/payload
pkt_data = bytes(pkt)
print("Packet size = %d bytes" %(len(pkt_data)))

src::Source()
q::Queue()
replayer = Replayer(offset=tag_offset, rate_mpps=playback_rate_mpps)

src -> Rewrite(templates=[pkt_data]) -> q
q -> replayer -> Bypass(cycles_per_packet=extra_cycles) -> Sink()

src.set_burst(burst=burst_size)
q.set_burst(burst=burst_size)

# core ID starts at the offset core
bess.add_worker(wid=1, core=1)
bess.add_worker(wid=2, core=2)
bess.add_tc('rl',
            policy='rate_limit',
            resource='packet',
            limit={'packet': pkt_rate},
            wid=1)
src.attach_task(parent='rl')
q.attach_task(wid=2)

bess.resume_all()
