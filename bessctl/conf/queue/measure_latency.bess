#
# This is a traffic generator that generates many TCP flows.
#

import scapy.all as scapy

PACKET_OVERHEAD=24

# This script generates a number of flows at a specified packet rate.
num_cores=int($BESS_CORES!'1')
num_flows =int($BESS_FLOWS!'1000')
flow_time=int($BESS_FLOW_TIME!'50') # in Seconds

qlen_offset = 72
ts_offset = 80
base_pkt_rate = 580000
pkt_size = 1000

assert(1 <= num_cores <= 16)
assert(60 <= pkt_size <= 1522)
assert(64 <= ts_offset <= 100)

src_ether=($BESS_SRC_ETHER!'00:15:4d:12:2b:f4')
dst_ether=($BESS_DST_ETHER!'00:00:00:00:00:04')
src_ip=($BESS_SRC_IP!'10.0.0.1')
dst_ip=($BESS_DST_IP!'192.0.0.1')
src_port=int($BESS_SRC_PORT!'10001')
dst_port=int($BESS_DST_PORT!'2000')

# Create a "template" packet to use for generated flows.
# All packets in flow will follow this formula; flowgen
# changes dst IP to generate new connections.
eth = scapy.Ether(src=src_ether, dst=dst_ether)
ip = scapy.IP(src=src_ip, dst=dst_ip)
tcp = scapy.TCP(sport=src_port, dport=dst_port)
payload = ('FaaS-NFV is cool.' + '0123456789' * 200)[:pkt_size-len(eth/ip/tcp)-PACKET_OVERHEAD]
pkt = eth/ip/tcp/payload
pkt_data = bytes(pkt)
print("Packet size = %d bytes" %(len(pkt_data)))

flowgens = dict()
queue::Queue(size=1024, queuestamp=True)
queue.set_burst(burst = 16)
chacha8::CHACHA(chacha_rounds = 8)
measure0::Measure(offset=ts_offset)

for i in range(num_cores):
    flowgens[i] = FlowGen(template = pkt_data, \
        pps = base_pkt_rate / num_cores, \
        flow_rate = num_flows / flow_time, \
        flow_duration = flow_time, \
        arrival = 'uniform', duration='uniform', quick_rampup=True, \
        ip_src_range = 50, ip_dst_range = 50, ignore_synfin=True)

    flowgens[i].set_burst(burst=1)
    flowgens[i] -> FlowLimiter(num_flows=1000) -> Timestamp(offset=ts_offset) -> queue

queue -> chacha8 -> measure0 -> Sink()

# Core allocation
bess.add_worker(wid=1, core=1)
queue.attach_task(wid=1)

for wid in range(num_cores):
    bess.add_worker(wid=wid+2, core=wid+2)
    flowgens[wid].attach_task(wid=wid+2)

bess.resume_all()
