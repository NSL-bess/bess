#include "flow_ip_lookup.h"

#include "../utils/checksum.h"
#include "../utils/ether.h"
#include "../utils/ip.h"
#include "../utils/tcp.h"

using bess::utils::ChecksumIncrement16;
using bess::utils::ChecksumIncrement32;
using bess::utils::UpdateChecksumWithIncrement;
using bess::utils::UpdateChecksum16;

CommandResponse FlowIPLookup::Init(const bess::pb::FlowIPLookupArg &arg) {
  endpoints_.clear();

  for (const auto &host : arg.endpoints()) {
    auto host_addr = host.endpoint();
    be32_t addr;

    bool ret = bess::utils::ParseIpv4Address(host_addr, &addr);
    if (!ret) {
      return CommandFailure(EINVAL, "invalid IP address %s", host_addr.c_str());
    }

    endpoints_.push_back(addr);
  }
  return CommandSuccess();
}

void FlowIPLookup::ProcessBatch(Context *ctx, bess::PacketBatch *batch) {
  using bess::utils::Ethernet;
  using bess::utils::Ipv4;
  using bess::utils::Tcp;

  gate_idx_t incoming_gate = ctx->current_igate;

  int cnt = batch->cnt();
  for (int i = 0; i < cnt; i++) {
    bess::Packet *pkt = batch->pkts()[i];

    Ethernet *eth = pkt->head_data<Ethernet *>();
    Ipv4 *ip = reinterpret_cast<Ipv4 *>(eth + 1);

    if (ip->protocol != Ipv4::Proto::kTcp) {
      EmitPacket(ctx, pkt, 0);
      continue;
    }

    size_t ip_bytes = ip->header_length << 2;
    Tcp *tcp =
        reinterpret_cast<Tcp *>(reinterpret_cast<uint8_t *>(ip) + ip_bytes);

    Flow flow;
    flow.src_ip = ip->src;
    flow.dst_ip = ip->dst;
    flow.src_port = tcp->src_port;
    flow.dst_port = tcp->dst_port;

    // Find existing flow, if we have one.
    std::unordered_map<Flow, be32_t, FlowHash>::iterator it =
        flow_cache_.find(flow);

    if (it != flow_cache_.end()) { // an existing flow
      EmitPacket(ctx, pkt, incoming_gate);
    } else { // by default, drop a new flow.
      std::tie(it, std::ignore) = flow_cache_.emplace(
          std::piecewise_construct, std::make_tuple(flow), std::make_tuple());
      
      size_t hashed = rte_hash_crc(&ip->src, sizeof(be32_t), 0);
      size_t endpoint_index = hashed % endpoints_.size();
      it->second = endpoints_[endpoint_index];
    }

    // Modify the packet's destination endpoint, and update IP checksum.
    be32_t before = ip->dst;
    be32_t after = it->second;
    ip->dst = it->second;

    uint32_t l3_increment =
      ChecksumIncrement32(before.raw_value(), after.raw_value());
    ip->checksum = UpdateChecksumWithIncrement(ip->checksum, l3_increment);

    uint32_t l4_increment = l3_increment;
    tcp->checksum = UpdateChecksumWithIncrement(tcp->checksum, l4_increment);

    if (tcp->flags & Tcp::Flag::kFin) {
      flow_cache_.erase(it);
    }
  }
}

ParsedPrefix FlowIPLookup::ParseIpv4Prefix(
    const std::string &prefix, uint64_t prefix_len) {
  using bess::utils::Format;
  be32_t net_addr;
  be32_t net_mask;

  if (!prefix.length()) {
    return std::make_tuple(EINVAL, "prefix' is missing", be32_t(0));
  }
  if (!bess::utils::ParseIpv4Address(prefix, &net_addr)) {
    return std::make_tuple(EINVAL,
			   Format("Invalid IP prefix: %s", prefix.c_str()),
			   be32_t(0));
  }

  if (prefix_len > 32) {
    return std::make_tuple(EINVAL,
			   Format("Invalid prefix length: %" PRIu64,
				  prefix_len),
			   be32_t(0));
  }

ADD_MODULE(FlowIPLookup, "flow_ipfwd",
           "IPv4Forward with a per-flow hash table")
